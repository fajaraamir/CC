using System;
using System.Collections.Generic;

class SymbolTable
{
    private Dictionary<int, List<string>> table;
    private int tableSize;

    public SymbolTable(int size)
    {
        tableSize = size;
        table = new Dictionary<int, List<string>>(size);

        for (int i = 0; i < size; i++)
            table[i] = new List<string>(); // Initialize empty lists
    }

    // Simple Hash Function
    private int HashFunction(string identifier)
    {
        int hash = 0;
        foreach (char ch in identifier)
        {
            hash += (int)ch; // Sum ASCII values of characters
        }
        return hash % tableSize; // Modulo to fit in table
    }

    // Insert into Symbol Table
    public void Insert(string identifier)
    {
        int index = HashFunction(identifier);

        if (!table[index].Contains(identifier))
        {
            table[index].Add(identifier);
            Console.WriteLine($"Inserted: {identifier} at Index {index}");
        }
        else
        {
            Console.WriteLine($"Duplicate Entry: {identifier} already exists.");
        }
    }

    // Search for an Identifier
    public bool Search(string identifier)
    {
        int index = HashFunction(identifier);
        return table[index].Contains(identifier);
    }

    // Display the Symbol Table
    public void Display()
    {
        Console.WriteLine("\nSymbol Table:");
        foreach (var entry in table)
        {
            Console.Write($"Index {entry.Key}: ");
            foreach (var id in entry.Value)
            {
                Console.Write($"{id} ");
            }
            Console.WriteLine();
        }
    }
}

class Program
{
    static void Main()
    {
        SymbolTable symbolTable = new SymbolTable(10); // Hash table size: 10

        while (true)
        {
            Console.WriteLine("\n1. Insert Identifier\n2. Search Identifier\n3. Display Symbol Table\n4. Exit");
            Console.Write("Enter Choice: ");
            int choice = Convert.ToInt32(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    Console.Write("Enter Identifier: ");
                    string id = Console.ReadLine();
                    symbolTable.Insert(id);
                    break;

                case 2:
                    Console.Write("Enter Identifier to Search: ");
                    string searchId = Console.ReadLine();
                    if (symbolTable.Search(searchId))
                        Console.WriteLine($"Found: {searchId}");
                    else
                        Console.WriteLine($"Not Found: {searchId}");
                    break;

                case 3:
                    symbolTable.Display();
                    break;

                case 4:
                    Console.WriteLine("Exiting...");
                    return;

                default:
                    Console.WriteLine("Invalid Choice! Try Again.");
                    break;
            }
        }
    }
}
