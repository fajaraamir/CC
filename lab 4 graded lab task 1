using System;
using System.Collections.Generic;
using System.IO;

class LexicalAnalyzer
{
    const int BUFFER_SIZE = 10; // Define buffer size
    char[] bufferA = new char[BUFFER_SIZE];
    char[] bufferB = new char[BUFFER_SIZE];
    int bufferPointer = 0;
    bool isBufferAActive = true;
    StreamReader fileReader;

    // List of keywords
    HashSet<string> keywords = new HashSet<string> { "if", "else", "while", "return", "int", "float", "char", "void" };

    public LexicalAnalyzer(string filePath)
    {
        fileReader = new StreamReader(filePath);
        LoadBuffer(); // Load initial buffer
    }

    private void LoadBuffer()
    {
        if (fileReader.EndOfStream)
            return;

        if (isBufferAActive)
        {
            Array.Clear(bufferB, 0, BUFFER_SIZE);
            fileReader.Read(bufferB, 0, BUFFER_SIZE);
        }
        else
        {
            Array.Clear(bufferA, 0, BUFFER_SIZE);
            fileReader.Read(bufferA, 0, BUFFER_SIZE);
        }

        isBufferAActive = !isBufferAActive; // Swap buffers
        bufferPointer = 0;
    }

    private char GetNextChar()
    {
        if (bufferPointer >= BUFFER_SIZE)
        {
            LoadBuffer();
            bufferPointer = 0;
        }

        return isBufferAActive ? bufferA[bufferPointer++] : bufferB[bufferPointer++];
    }

    public void Analyze()
    {
        char currentChar;
        string lexeme = "";

        while (!fileReader.EndOfStream)
        {
            currentChar = GetNextChar();

            if (char.IsLetter(currentChar)) // Identifier or Keyword
            {
                lexeme += currentChar;
                while (char.IsLetterOrDigit(currentChar = GetNextChar()))
                    lexeme += currentChar;

                if (keywords.Contains(lexeme))
                    Console.WriteLine($"Keyword: {lexeme}");
                else
                    Console.WriteLine($"Identifier: {lexeme}");

                lexeme = "";
                bufferPointer--; // Rollback to unread character
            }
            else if (char.IsDigit(currentChar)) // Number
            {
                lexeme += currentChar;
                while (char.IsDigit(currentChar = GetNextChar()))
                    lexeme += currentChar;

                Console.WriteLine($"Number: {lexeme}");
                lexeme = "";
                bufferPointer--;
            }
            else if ("+-*/=;(){}".Contains(currentChar)) // Operators & Symbols
            {
                Console.WriteLine($"Symbol: {currentChar}");
            }
            else if (char.IsWhiteSpace(currentChar)) // Ignore spaces
            {
                continue;
            }
        }

        fileReader.Close();
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Enter file path to analyze: ");
        string filePath = Console.ReadLine();

        if (!File.Exists(filePath))
        {
            Console.WriteLine("Error: File not found.");
            return;
        }

        LexicalAnalyzer lexer = new LexicalAnalyzer(filePath);
        lexer.Analyze();

        Console.WriteLine("\nLexical Analysis Completed.");
    }
}
